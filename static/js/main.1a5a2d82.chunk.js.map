{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","currentMonth","Date","getMonth","season","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,eA4BHE,EAhBO,SAACC,GACnB,IATeC,EAAKC,EASdC,GAAe,IAAIC,MAAOC,WAC1BC,GAVSL,EAUUD,EAAMC,KAVXC,EAUgBC,GATxB,GAAKD,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIHM,EAGFb,EAAaY,GAAhCV,EAHqBW,EAGrBX,KAAMC,EAHeU,EAGfV,SAGd,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBN,IAC9BE,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKf,EAAL,6BACZW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBf,GAC/BY,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKf,EAAL,gCC9BlBgB,EAAU,SAACb,GACb,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBX,EAAMc,WAKnDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCRTG,6MACFC,MAAQ,CACJhB,IAAK,KACLiB,aAAc,uFAGE,IAAAC,EAAAC,KAChBC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GACGN,EAAKO,SAAS,CACVzB,IAAKwB,EAASE,OAAOC,YAG7B,SAACC,GACGV,EAAKO,SAAS,CACVR,aAAcW,EAAIf,oDAa9B,OAAIM,KAAKH,MAAMC,aACJV,EAAAC,EAAAC,cAAA,qBAAaU,KAAKH,MAAMC,cACxBE,KAAKH,MAAMhB,IACXO,EAAAC,EAAAC,cAACoB,EAAD,CAAe7B,IAAKmB,KAAKH,MAAMhB,MAGlCO,EAAAC,EAAAC,cAACqB,EAAD,CAASjB,QAAQ,oEAMzB,OAGIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVS,KAAKY,wBA5CJC,IAAMC,WAkDxBC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.1a5a2d82.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react'\n\nconst seasonConfig = {\n    summer: {\n        text: 'Let\\'s hit the bitch',\n        iconName: 'sun',\n    },\n    winter: {\n        text: 'Burr, it is chilly',\n        iconName: 'snowflake',\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter'\n    } else {\n        return lat > 0 ? 'winter' : 'summer'\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const currentMonth = new Date().getMonth()\n    const season = getSeason(props.lat, currentMonth)\n    const { text, iconName } = seasonConfig[season]\n\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`${iconName} icon massive icon-left`} />\n            <div className=\"text-content\">{text}</div>\n            <i className={`${iconName} icon massive icon-right`} />\n\n        </div>\n    )\n}\n\nexport default SeasonDisplay","import React from 'react'\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui text loader\">{props.message}</div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SeasonDisplay from './SeasonDisplay'\nimport Spinner from './Spinner'\n\n\nclass App extends React.Component {\n    state = {\n        lat: null,\n        errorMessage: ''\n    }\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => {\n                this.setState({\n                    lat: position.coords.latitude\n                })\n            },\n            (err) => {\n                this.setState({\n                    errorMessage: err.message\n\n                });\n            }\n        );\n    }\n\n    /**\n     * This method takes care of the decision making when\n     * rendering the component.\n     * \n     */\n    renderContent() {\n        if (this.state.errorMessage) {\n            return <div>Error: {this.state.errorMessage}</div>\n        } else if (this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} />\n        } else {\n            return (\n                <Spinner message=\"Please accept location request\" />\n            );\n        }\n    }\n\n    render() {\n        return (\n            // The div is not necessary here but to show\n            // the power of refactoring\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}